---
import { getFeaturedProjects, getStatusBadgeClass } from '../utils/projects';

// Get featured projects for the carousel
const featuredProjects = await getFeaturedProjects();
---

<div class="carousel-container">
  <div class="carousel-track">
    {featuredProjects.concat(featuredProjects).map((project, index) => (
      <div class="carousel-item" key={`${project.slug}-${index}`}>
        <div class="project-card">
          <div class="project-image">
            <a href={project.data.hasWriteup ? `/projects/${project.slug}` : (project.data.externalUrl || project.data.liveUrl || project.data.githubUrl || '#')} class="image-link" target={project.data.hasWriteup ? '_self' : '_blank'} rel={project.data.hasWriteup ? '' : 'noopener noreferrer'}>
              <img src={project.data.image} alt={project.data.imageAlt} />
              <div class="read-more-overlay">
                <span>{project.data.hasWriteup ? 'Read More' : 'View Project'}</span>
              </div>
            </a>
          </div>
          <div class="project-content">
            <h3><a href={`/projects/${project.slug}`} class="title-link">{project.data.title}</a></h3>
            <p class="project-description" data-full-text={project.data.description}>
              {project.data.description.length > 100 ? project.data.description.slice(0, 100) + '...' : project.data.description}
            </p>
            <div class="project-tags">
              {project.data.technologies.slice(0, 3).map((tech) => (
                <span>{tech}</span>
              ))}
            </div>
            <div class="project-links">
              <a href={project.data.hasWriteup ? `/projects/${project.slug}` : (project.data.externalUrl || project.data.liveUrl || project.data.githubUrl || '#')} class="btn btn-primary" target={project.data.hasWriteup ? '_self' : '_blank'} rel={project.data.hasWriteup ? '' : 'noopener noreferrer'}>
                {project.data.hasWriteup ? 'Read More' : 'View Project'}
              </a>
              {project.data.liveUrl && project.data.hasWriteup && (
                <a href={project.data.liveUrl} target="_blank" rel="noopener noreferrer" class="btn">View Live</a>
              )}
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .carousel-container {
    overflow: hidden;
    position: relative;
    margin: 2rem 0;
  }

  .carousel-track {
    display: flex;
    animation: scroll-right-to-left 30s linear infinite;
    width: fit-content;
  }

  .carousel-item {
    flex: 0 0 350px;
    margin-right: 2rem;
  }

  .project-card {
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    background-color: var(--color-bg-alt);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .project-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
  }

  .project-image {
    height: 200px;
    position: relative;
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .status-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    padding: 0.3rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    z-index: 2;
  }

  .status-completed {
    background-color: #10b981;
    color: white;
  }

  .status-in-progress {
    background-color: #f59e0b;
    color: white;
  }

  .status-planned {
    background-color: #6366f1;
    color: white;
  }


  .project-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .project-content h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.25rem;
  }

  .project-content p {
    color: var(--color-text-alt);
    margin-bottom: 1rem;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .project-description {
    cursor: pointer;
    transition: color 0.3s ease;
  }

  .project-description:hover {
    color: var(--color-text);
  }

  .project-description.expanded {
    color: var(--color-text);
  }

  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .project-tags span {
    background-color: var(--color-bg);
    color: var(--color-primary);
    padding: 0.25rem 0.5rem;
    border-radius: 20px;
    font-size: 0.7rem;
  }

  .project-links {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: auto;
  }

  .btn {
    display: inline-block;
    padding: 0.4rem 0.8rem;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
    background-color: var(--color-bg-card);
    color: var(--color-text);
    border: 1px solid var(--color-bg-card);
  }

  .btn:hover {
    background-color: var(--color-bg-alt);
    border-color: var(--color-primary);
  }

  .btn-primary {
    background-color: var(--color-bg-card);
    color: var(--primary-color);
    border-color: var(--color-bg-card);
  }

  .btn-primary:hover {
    background-color: var(--primary-color);
    color: var(--color-bg);
    border-color: var(--primary-color);
  }

  .image-link {
    display: block;
    position: relative;
    height: 100%;
    overflow: hidden;
  }

  .read-more-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .read-more-overlay span {
    padding: 6px 12px;
    border: 1px solid white;
    font-weight: 400;
    font-size: 0.7rem;
    transform: translateY(20px);
    transition: transform 0.3s ease;
    opacity: 0.9;
  }

  .image-link:hover .read-more-overlay {
    opacity: 1;
  }

  .image-link:hover .read-more-overlay span {
    transform: translateY(0);
  }

  .title-link {
    color: inherit;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .title-link:hover {
    color: var(--color-primary);
  }

  @keyframes scroll-right-to-left {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  /* Pause animation when paused class is applied */
  .carousel-track.paused {
    animation-play-state: paused;
  }

  .carousel-container {
    cursor: grab;
  }

  .carousel-container:active {
    cursor: grabbing;
  }

  .carousel-container.dragging {
    cursor: grabbing;
  }

  .carousel-container.dragging .carousel-track {
    animation-play-state: paused;
    animation: none !important;
  }

  @media (max-width: 768px) {
    .carousel-item {
      flex: 0 0 280px;
    }
    
    .carousel-track {
      animation-duration: 40s;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carouselContainer = document.querySelector('.carousel-container');
    const carouselTrack = document.querySelector('.carousel-track');
    const projectCards = document.querySelectorAll('.project-card');
    
    if (!carouselContainer || !carouselTrack) return;
    
    let isDragging = false;
    let startX = 0;
    let currentTranslate = 0;
    let animationId = 0;
    let hasDragged = false;
    
    // Get current transform value
    function getCurrentTranslate() {
      const style = window.getComputedStyle(carouselTrack);
      const matrix = new DOMMatrix(style.transform);
      return matrix.m41; // translateX value
    }
    
    // Set transform with manual offset
    function setTrackPosition(translateX) {
      carouselTrack.style.transform = `translateX(${translateX}px)`;
      carouselTrack.style.animation = 'none';
    }
    
    // Resume normal animation
    function resumeAnimation() {
      carouselTrack.style.animation = '';
      carouselTrack.style.transform = '';
    }
    
    // Mouse events
    carouselContainer.addEventListener('mousedown', (e) => {
      isDragging = true;
      hasDragged = false;
      startX = e.clientX;
      currentTranslate = getCurrentTranslate();
      carouselContainer.classList.add('dragging');
      carouselTrack.classList.add('paused');
      e.preventDefault();
    });
    
    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      
      const deltaX = e.clientX - startX;
      if (Math.abs(deltaX) > 5) { // Only consider it a drag if moved more than 5px
        hasDragged = true;
      }
      const newTranslate = currentTranslate + deltaX;
      setTrackPosition(newTranslate);
    });
    
    document.addEventListener('mouseup', () => {
      if (!isDragging) return;
      
      isDragging = false;
      carouselContainer.classList.remove('dragging');
      
      // Resume animation after a short delay
      setTimeout(() => {
        resumeAnimation();
        carouselTrack.classList.remove('paused');
      }, 1000);
    });
    
    // Touch events for mobile
    carouselContainer.addEventListener('touchstart', (e) => {
      isDragging = true;
      hasDragged = false;
      startX = e.touches[0].clientX;
      currentTranslate = getCurrentTranslate();
      carouselContainer.classList.add('dragging');
      carouselTrack.classList.add('paused');
    });
    
    carouselContainer.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      
      const deltaX = e.touches[0].clientX - startX;
      if (Math.abs(deltaX) > 5) { // Only consider it a drag if moved more than 5px
        hasDragged = true;
      }
      const newTranslate = currentTranslate + deltaX;
      setTrackPosition(newTranslate);
      e.preventDefault();
    });
    
    carouselContainer.addEventListener('touchend', () => {
      if (!isDragging) return;
      
      isDragging = false;
      carouselContainer.classList.remove('dragging');
      
      // Resume animation after a short delay
      setTimeout(() => {
        resumeAnimation();
        carouselTrack.classList.remove('paused');
      }, 1000);
    });
    
    // Prevent clicks when dragging
    carouselContainer.addEventListener('click', (e) => {
      if (hasDragged) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, true);
    
    // Prevent link clicks when dragging
    const allLinks = carouselContainer.querySelectorAll('a');
    allLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        if (hasDragged) {
          e.preventDefault();
          e.stopPropagation();
        }
      });
    });
    
    // Handle description expansion
    const descriptions = carouselContainer.querySelectorAll('.project-description');
    descriptions.forEach(desc => {
      desc.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (hasDragged) return; // Don't expand if we just dragged
        
        const fullText = desc.dataset.fullText;
        const currentText = desc.textContent;
        
        if (currentText.includes('...')) {
          desc.textContent = fullText;
          desc.classList.add('expanded');
        } else if (fullText.length > 100) {
          desc.textContent = fullText.slice(0, 100) + '...';
          desc.classList.remove('expanded');
        }
      });
    });
    
    // Existing hover pause functionality
    projectCards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        if (!isDragging) {
          carouselTrack.classList.add('paused');
        }
      });
      
      card.addEventListener('mouseleave', () => {
        if (!isDragging) {
          carouselTrack.classList.remove('paused');
        }
      });
    });
  });
</script>