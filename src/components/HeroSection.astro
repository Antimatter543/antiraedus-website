---
---

<section id="home" class="hero-section">
  <canvas id="blackhole-canvas"></canvas>
  <div class="container">
    <div class="poem">
      <h2>Welcome to My World</h2>
      <p>
        In the realm of code and design,<br>
        Where creativity and logic intertwine,<br>
        I build dreams with digital brush strokes,<br>
        Turning ideas into realities, line by line.
      </p>
      <p>
        A craftsman of the virtual space,<br>
        Weaving functions with artistic grace,<br>
        Welcome to my digital portfolio,<br>
        Where passion and profession embrace.
      </p>
      <div class="scroll-indicator">
        <p>Scroll to explore</p>
        <div class="arrow">â†“</div>
      </div>
    </div>
  </div>
</section>

<style>
  .hero-section {
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    background: #000;
    color: #fff;
    text-align: center;
    overflow: hidden;
  }

  #blackhole-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }
  
  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
    position: relative;
    z-index: 1;
  }
  
  .poem {
    animation: fadeIn 2s ease;
  }
  
  .poem h2 {
    font-size: 3rem;
    margin-bottom: 2rem;
    font-weight: 600;
  }
  
  .poem p {
    font-size: 1.5rem;
    line-height: 2.2rem;
    margin-bottom: 2rem;
    font-style: italic;
  }
  
  .scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    text-align: center;
  }
  
  .scroll-indicator p {
    font-size: 1rem;
    opacity: 0.7;
    margin-bottom: 0.5rem;
  }
  
  .arrow {
    font-size: 1.5rem;
    animation: bounce 2s infinite;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-20px); }
    60% { transform: translateY(-10px); }
  }
</style>

<script>
  class BlackHole {
    constructor() {
      this.canvas = document.getElementById('blackhole-canvas');
      this.ctx = this.canvas.getContext('2d');
      this.particles = [];
      this.stars = [];
      this.time = 0;
      
      this.init();
      this.animate();
    }

    init() {
      this.resize();
      window.addEventListener('resize', () => this.resize());
      
      // Create static background stars
      for (let i = 0; i < 100; i++) {
        this.stars.push({
          x: Math.random() * this.canvas.width,
          y: Math.random() * this.canvas.height,
          size: Math.random() * 1.5 + 0.5,
          opacity: Math.random() * 0.8 + 0.2
        });
      }
      
      // Create fewer orbital particles
      for (let i = 0; i < 200; i++) {
        this.particles.push(this.createParticle());
      }
    }

    resize() {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
      this.centerX = this.canvas.width / 2;
      this.centerY = this.canvas.height / 2;
    }

    createParticle() {
      const angle = Math.random() * Math.PI * 2;
      const distance = Math.random() * 200 + 120;
      return {
        angle: angle,
        distance: distance,
        orbitSpeed: Math.random() * 0.005 + 0.002,
        size: Math.random() * 1.5 + 0.8,
        opacity: Math.random() * 0.6 + 0.3
      };
    }

    animate() {
      // Clear canvas with black background
      this.ctx.fillStyle = 'rgba(0, 0, 0, 1)';
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      
      this.time += 0.01;
      
      // Draw static stars
      this.stars.forEach(star => {
        this.ctx.beginPath();
        this.ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
        this.ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity * 0.4})`;
        this.ctx.fill();
      });
      
      // Draw subtle black hole center
      const gradient = this.ctx.createRadialGradient(
        this.centerX, this.centerY, 0,
        this.centerX, this.centerY, 60
      );
      gradient.addColorStop(0, 'rgba(0, 0, 0, 1)');
      gradient.addColorStop(0.8, 'rgba(40, 40, 40, 0.6)');
      gradient.addColorStop(1, 'rgba(80, 80, 80, 0.2)');
      
      this.ctx.beginPath();
      this.ctx.arc(this.centerX, this.centerY, 60, 0, Math.PI * 2);
      this.ctx.fillStyle = gradient;
      this.ctx.fill();

      // Update and draw orbital particles
      this.particles.forEach(particle => {
        // Slow orbital motion
        particle.angle += particle.orbitSpeed;
        
        // Calculate position
        const x = this.centerX + Math.cos(particle.angle) * particle.distance;
        const y = this.centerY + Math.sin(particle.angle) * particle.distance;
        
        // Draw particle in greyscale
        this.ctx.beginPath();
        this.ctx.arc(x, y, particle.size, 0, Math.PI * 2);
        this.ctx.fillStyle = `rgba(200, 200, 200, ${particle.opacity})`;
        this.ctx.fill();
      });

      requestAnimationFrame(() => this.animate());
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new BlackHole();
  });
</script>
