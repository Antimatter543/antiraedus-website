---
import Layout from '../layouts/Layout.astro';
import { getAllProjects, getProjectCategories, getAllTechnologies, getStatusBadgeClass } from '../utils/projects';
import type { Project } from '../utils/projects';

// Get all projects and metadata
const allProjects = await getAllProjects();
const categories = await getProjectCategories();
const technologies = await getAllTechnologies();

// Client-side filtering setup
---

<Layout title="Projects | Antiraedus" description="Browse all of my projects and portfolio work">
  <main class="projects-page">
    <div class="container">
      <h1>My Projects</h1>
      
      <div class="projects-filters">
        <div class="filter-group">
          <label for="category-filter">Category</label>
          <select id="category-filter" class="filter-select">
            <option value="all">All Categories</option>
            {categories.map((category) => (
              <option value={category.toLowerCase()}>{category}</option>
            ))}
          </select>
        </div>
        
        <div class="filter-group">
          <label for="tech-filter">Technology</label>
          <select id="tech-filter" class="filter-select">
            <option value="all">All Technologies</option>
            {technologies.map((tech) => (
              <option value={tech.toLowerCase()}>{tech}</option>
            ))}
          </select>
        </div>
        
        <div class="filter-group">
          <label for="status-filter">Status</label>
          <select id="status-filter" class="filter-select">
            <option value="all">All Statuses</option>
            <option value="completed">Completed</option>
            <option value="in-progress">In Progress</option>
            <option value="planned">Planned</option>
          </select>
        </div>
      </div>

      <div class="projects-grid" id="projects-grid">
        {allProjects.map((project) => (
          <div 
            class="project-card" 
            data-category={project.data.category.toLowerCase()} 
            data-techs={project.data.technologies.map(t => t.toLowerCase()).join(' ')} 
            data-status={project.data.status}
          >            <div class="project-image">
              <a href={`/projects/${project.slug}`} class="image-link">
                <img src={project.data.image} alt={project.data.imageAlt} />
                <div class="read-more-overlay">
                  <span>Read Case Study</span>
                </div>
              </a>
              <div class={`status-badge ${getStatusBadgeClass(project.data.status)}`}>
                {project.data.status}
              </div>
              {project.data.featured && <div class="featured-badge">Featured</div>}
            </div>
            <div class="project-content">
              <h2><a href={`/projects/${project.slug}`} class="title-link">{project.data.title}</a></h2>
              <p>{project.data.description}</p>
              <div class="project-tags">
                {project.data.technologies.map((tech) => (
                  <span class="tag">{tech}</span>
                ))}
              </div>
              <div class="project-category">
                <span class="category-label">{project.data.category}</span>
              </div>              <div class="project-links">
                <a href={`/projects/${project.slug}`} class="btn btn-primary">
                  Read Case Study
                </a>
                {project.data.liveUrl && (
                  <a href={project.data.liveUrl} target="_blank" rel="noopener noreferrer" class="btn">
                    View Live
                  </a>
                )}
                {project.data.githubUrl && (
                  <a href={project.data.githubUrl} target="_blank" rel="noopener noreferrer" class="btn btn-outline">
                    Source Code
                  </a>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </main>
</Layout>

<style>
  .projects-page {
    padding: 4rem 0;
  }

  h1 {
    margin-bottom: 2rem;
    text-align: center;
  }

  .projects-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    margin-bottom: 3rem;
    background-color: var(--color-bg-alt);
    padding: 1.5rem;
    border-radius: 8px;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    min-width: 220px;
  }

  .filter-group label {
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .filter-select {
    padding: 0.75rem 1rem;
    border-radius: 4px;
    border: 1px solid var(--color-border);
    background-color: var(--color-bg);
    font-size: 1rem;
    cursor: pointer;
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 2rem;
  }

  .project-card {
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    background-color: var(--color-bg-alt);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .project-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
  }

  .project-image {
    height: 220px;
    position: relative;
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .status-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    padding: 0.3rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    z-index: 2;
  }

  .status-completed {
    background-color: #10b981;
    color: white;
  }

  .status-in-progress {
    background-color: #f59e0b;
    color: white;
  }

  .status-planned {
    background-color: #6366f1;
    color: white;
  }

  .featured-badge {
    position: absolute;
    top: 1rem;
    left: 1rem;
    padding: 0.3rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    background-color: #dc2626;
    color: white;
    text-transform: uppercase;
    z-index: 2;
  }

  .project-content {
    padding: 1.5rem;
  }

  .project-content h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .project-content p {
    color: var(--color-text-alt);
    margin-bottom: 1.5rem;
  }

  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.25rem;
  }

  .tag {
    background-color: var(--color-bg);
    color: var(--color-primary);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
  }

  .project-category {
    margin-bottom: 1.25rem;
  }

  .category-label {
    display: inline-block;
    font-size: 0.9rem;
    color: var(--color-text-alt);
  }

  .project-links {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .btn {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-size: 0.9rem;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-primary {
    background-color: var(--color-primary);
    color: white;
  }

  .btn-primary:hover {
    opacity: 0.9;
  }

  .btn-outline {
    border: 1px solid var(--color-primary);
    color: var(--color-primary);
  }

  .btn-outline:hover {
    background-color: var(--color-primary);
    color: white;
  }

  .btn-secondary {
    background-color: var(--color-secondary);
    color: white;
  }

  .btn-secondary:hover {
    opacity: 0.9;
  }

  .image-link {
    display: block;
    position: relative;
    height: 100%;
    overflow: hidden;
  }

  .read-more-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .read-more-overlay span {
    padding: 10px 20px;
    border: 2px solid white;
    font-weight: 600;
    transform: translateY(20px);
    transition: transform 0.3s ease;
  }

  .image-link:hover .read-more-overlay {
    opacity: 1;
  }

  .image-link:hover .read-more-overlay span {
    transform: translateY(0);
  }

  .title-link {
    color: inherit;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .title-link:hover {
    color: var(--color-primary);
  }
  
  @media (max-width: 768px) {
    .projects-filters {
      flex-direction: column;
      gap: 1rem;
    }
  }
</style>

<script>
  // Client-side filtering
  const projectsGrid = document.getElementById('projects-grid');
  const categoryFilter = document.getElementById('category-filter');
  const techFilter = document.getElementById('tech-filter');
  const statusFilter = document.getElementById('status-filter');
  
  function filterProjects() {
    if (!projectsGrid || !categoryFilter || !techFilter || !statusFilter) return;
    
    const selectedCategory = (categoryFilter as HTMLSelectElement).value;
    const selectedTech = (techFilter as HTMLSelectElement).value;
    const selectedStatus = (statusFilter as HTMLSelectElement).value;
    
    const projects = projectsGrid.querySelectorAll('.project-card');
    
    projects.forEach((project) => {
      const element = project as HTMLElement;
      const projectCategory = element.dataset.category || '';
      const projectTechs = element.dataset.techs || '';
      const projectStatus = element.dataset.status || '';
      
      const matchesCategory = selectedCategory === 'all' || projectCategory === selectedCategory;
      const matchesTech = selectedTech === 'all' || projectTechs.includes(selectedTech);
      const matchesStatus = selectedStatus === 'all' || projectStatus === selectedStatus;
      
      if (matchesCategory && matchesTech && matchesStatus) {
        element.style.display = 'block';
      } else {
        element.style.display = 'none';
      }
    });
  }
  
  // Add event listeners
  categoryFilter?.addEventListener('change', filterProjects);
  techFilter?.addEventListener('change', filterProjects);
  statusFilter?.addEventListener('change', filterProjects);
</script>
